# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '.\pyqtDesigner_Deneme2.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets

import mysql.connector as mc
from PyQt5.QtWidgets import QTableWidgetItem

class Ui_Form(object):
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(700, 547)
        self.horizontalLayoutWidget = QtWidgets.QWidget(Form)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(40, 20, 471, 81))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.label = QtWidgets.QLabel(self.horizontalLayoutWidget)
        self.label.setObjectName("label")
        self.horizontalLayout.addWidget(self.label)
        self.lineEditDbName = QtWidgets.QLineEdit(self.horizontalLayoutWidget)
        self.lineEditDbName.setObjectName("lineEditDbName")
        self.horizontalLayout.addWidget(self.lineEditDbName)
        self.lineEditDbName2 = QtWidgets.QLineEdit(self.horizontalLayoutWidget)
        self.lineEditDbName2.setObjectName("lineEditDbName2")
        self.horizontalLayout.addWidget(self.lineEditDbName2)
        self.horizontalLayoutWidget_2 = QtWidgets.QWidget(Form)
        self.horizontalLayoutWidget_2.setGeometry(QtCore.QRect(30, 120, 551, 80))
        self.horizontalLayoutWidget_2.setObjectName("horizontalLayoutWidget_2")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_2)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.pushButtonCreateDB = QtWidgets.QPushButton(self.horizontalLayoutWidget_2)
        self.pushButtonCreateDB.setObjectName("pushButtonCreateDB")
        self.pushButtonCreateDB.clicked.connect(self.create_database)
        self.horizontalLayout_2.addWidget(self.pushButtonCreateDB)
        self.pushButtondbCon = QtWidgets.QPushButton(self.horizontalLayoutWidget_2)
        self.pushButtondbCon.setStyleSheet("")
        self.pushButtondbCon.setObjectName("pushButtondbCon")
        self.pushButtondbCon.clicked.connect(self.db_connect)
        self.horizontalLayout_2.addWidget(self.pushButtondbCon)
        self.label_2 = QtWidgets.QLabel(Form)
        self.label_2.setGeometry(QtCore.QRect(40, 220, 621, 31))
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.tableWidget = QtWidgets.QTableWidget(Form)
        self.tableWidget.setGeometry(QtCore.QRect(40, 280, 631, 241))
        self.tableWidget.setRowCount(16)
        self.tableWidget.setColumnCount(3)
        self.tableWidget.setObjectName("tableWidget")
        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)


    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))
        self.label.setText(_translate("Form", "Give 2 value for adding database"))
        self.pushButtonCreateDB.setText(_translate("Form", "Add Database"))
        self.pushButtondbCon.setText(_translate("Form", "Show Value from Database"))
        self.label_2.setText(_translate("Form", "TextLabel"))

    def create_database(self):
        try:
            mydb = mc.connect(
                host="localhost",
                database='for_pyqt',
                user="root",
                passwd="admin",
                auth_plugin='mysql_native_password')


            cursor = mydb.cursor()

            #will be work only one
            #Create Database and Table
            #cursor.execute("CREATE DATABASE for_pyqt")
            #cursor.execute("CREATE TABLE pyqt_table9 (id int, username VARCHAR(50), email VARCHAR(50))")


            #We will find MAX(id), because the next id will be MAX(id)+1
            cursor.execute("SELECT MAX(id) FROM pyqt_table9")
            result2 = cursor.fetchone()
            print(result2[0])

            if result2[0] is None:
                counter = 1
            elif result2[0] > 0:
                counter = result2[0] + 1

            sqlFormula = "INSERT INTO pyqt_table9 (id, username, email) VALUES(%s,%s,%s)"
            toMySQL = [(counter, self.lineEditDbName.text(), self.lineEditDbName2.text())]
            cursor.executemany(sqlFormula, toMySQL)
            mydb.commit()
            self.label_2.setText(" {} create".format(toMySQL))

        except mc.Error as e:
            self.label_2.setText("Error !")

    def db_connect(self):
        try:
            mydb = mc.connect(
                host="localhost",
                database='for_pyqt',  # 2 table, id(int) and email(varchar)
                user="root",
                passwd="admin",
                auth_plugin='mysql_native_password')

            mycursor = mydb.cursor()

            #Everything from database
            #mycursor.execute("SELECT * FROM pyqt_table9 ")


            #Order and give me just last x value
            mycursor.execute("SELECT * FROM pyqt_table9 ORDER BY id DESC LIMIT 10")
            result = mycursor.fetchall()





            #1- Change value which is u want from un( textbox from designer) !
            #un = self.lineEditDbName.text()
            #mycursor.execute("UPDATE pyqt_table3 SET id = 70,username= 'selam' ,email= 'asdf4' WHERE id = '" + un + "' ")
            #mydb.commit()


            self.tableWidget.setRowCount(0)

            for row_number, row_data in enumerate(result):
                self.tableWidget.insertRow(row_number)
                if row_number > 25:
                    print("row number", row_number)
                for column_number, data in enumerate(row_data):
                    self.tableWidget.setItem(row_number,column_number, QTableWidgetItem(str(data)))

            #self.label_2.setText("There is a connection")

        except mc.Error as e:
            self.label_2.setText("Error in connection")


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Form = QtWidgets.QWidget()
    ui = Ui_Form()
    ui.setupUi(Form)
    Form.show()
    sys.exit(app.exec_())


